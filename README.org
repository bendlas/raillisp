
Raillisp is a simple lisp implemented in Forth.
It aims to be small, fast, and portable.

Raillisp is in active development. Currently it only runs on Gforth,
but will soon run on everything from microcontrollers to web browsers.

It is designed to give you high level lisp features
while retaining low level access and a small footprint
making it suitable for constrained systems.
Raillisp lets you ride the metal in style.

Raillisp works by compiling lisp functions into forth words.
For example, create a lisp function and show the disassembled forth word:
#+BEGIN_SRC lisp
  (defun fib (n)
    (if (< n 3)
        1
      (+ (fib (- n 1)) (fib (- n 2)))))

  (disassemble 'fib)
#+END_SRC
prints:
: : fib
:   dup 7 <
:   IF     3
:   ELSE   dup 3 - fib over 5 - fib +
:   THEN
:   nip ;
(the number constants are different because of the lisp type tagging,
=disassemble= just calls the forth word =see=)

More documentation is forthcoming. For now more example code
can be found in =raillisp.lsp= and =tests.lsp=.

The Raillisp dialect is influenced by Common Lisp and Scheme,
but there are substantial differences.
Lots of common features are not currently supported, some never will be.
Features that compromise the performance of the system will
not be implemented.
