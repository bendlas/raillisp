
;; prints: forth-init-time lisp-init-words forth-dict-words lisp-dict-words bench-loop-time bench-tak-time bench-fib-time bench-calls-time bench-locals-time

(defun bench-loop ()
  (var n 0)
  (var start (utime))
  (while (< n 4000000)
    (set n (1+ n)))
  (- (utime) start))

(defun tak (x y z)
  (if (not (< y x))
      z
    (tak
     (tak (1- x) y z)
     (tak (1- y) z x)
     (tak (1- z) x y))))

(defun fib (n)
  (if (< n 3) 1
    (+ (fib (- n 1)) (fib (- n 2)))))

(defun f1 (a)
  (var x 1)
  nil)

(defun f2 (a b)
  (var x 1)
  (var y 2)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1)
  (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1) (f1 1))

(defun f3 (a b c)
  (var x 1) ; force setup and cleanup of a local
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2)
  (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2) (f2 1 2))

(defun docalls ()
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2)
  (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2) (f3 1 2 2))

(defun bench-calls ()
  (var n 0)
  (var start (utime))
  (docalls)
  (- (utime) start))

(defun locals (a b c d e f)
  (var aa a) (var bb b) (var cc c) (var dd d) (var ee e) (var ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f)
  (set aa a) (set bb b) (set cc c) (set dd d) (set ee e) (set ff f))

(defun bench-locals ()
  (var n 0)
  (var start (utime))
  (while (< n 70000)
    (locals 1 2 3 4 5 6)
    (set n (1+ n)))
  (- (utime) start))

(defun bench-tak ()
  (var n 0)
  (var start (utime))
  (tak 18 12 6)
  (- (utime) start))

(defun bench-fib ()
  (var n 0)
  (var start (utime))
  (fib 26)
  (- (utime) start))

(defun runbench-loop ()
  (var n 0)
  (var time (bench-loop))
  (while (< n 20)
    (set time (min time (bench-loop)))
    (set n (1+ n)))
  time)

(defun runbench-tak ()
  (var n 0)
  (var time (bench-tak))
  (while (< n 20)
    (set time (min time (bench-tak)))
    (set n (1+ n)))
  time)

(defun runbench-fib ()
  (var n 0)
  (var time (bench-fib))
  (while (< n 20)
    (set time (min time (bench-fib)))
    (set n (1+ n)))
  time)

(defun runbench-calls ()
  (var n 0)
  (var time (bench-calls))
  (while (< n 20)
    (set time (min time (bench-calls)))
    (set n (1+ n)))
  time)

(defun runbench-locals ()
  (var n 0)
  (var time (bench-locals))
  (while (< n 20)
    (set time (min time (bench-locals)))
    (set n (1+ n)))
  time)

(print forth-init-time) (print " ")
(print lisp-init-time) (print " ")
(print forth-dict-space) (print " ")
(print lisp-dict-space) (print " ")
(print (runbench-loop)) (print " ")
(print (runbench-tak)) (print " ")
(print (runbench-fib)) (print " ")
(print (runbench-calls)) (print " ")
(print (runbench-locals))
