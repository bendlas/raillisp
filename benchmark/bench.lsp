
;; prints: forth-init lisp-init bench1 bench2 bench3

(def bench1 ()
     (var n 0)
     (var start (utime))
     (while (< n 2000000)
       (set n (+1 n)))
     (- (utime) start))

(def factorial (n)
     (if (= n 1)
         1
       (* n (factorial (- n 1)))))

(def bench2 ()
     (var n 0)
     (var start (utime))
     (while (< n 100000)
       (factorial 6)
       (set n (+1 n)))
     (- (utime) start))

(def locals (a b c d e f g)
     (var r (+ (+ (+ (+ (+ (+ a b) c ) d) e) f) g))
     (set r (+ r (+ (+ (+ (+ (+ (+ a b) c ) d) e) f) g)))
     (set r (+ r (+ (+ (+ (+ (+ (+ a b) c ) d) e) f) g)))
     (set r (+ r (+ (+ (+ (+ (+ (+ a b) c ) d) e) f) g)))
     (set r (+ r (+ (+ (+ (+ (+ (+ a b) c ) d) e) f) g)))
     r)

(def bench3 ()
     (var n 0)
     (var start (utime))
     (while (< n 50000)
       (locals 1 2 3 4 5 6 7)
       (set n (+1 n)))
     (- (utime) start))

(def runbench1 ()
     (var n 0)
     (var time (bench1))
     (while (< n 20)
       (set time (min time (bench1)))
       (set n (+1 n)))
     time)

(def runbench2 ()
     (var n 0)
     (var time (bench2))
     (while (< n 20)
       (set time (min time (bench2)))
       (set n (+1 n)))
     time)

(def runbench3 ()
     (var n 0)
     (var time (bench3))
     (while (< n 20)
       (set time (min time (bench3)))
       (set n (+1 n)))
     time)

(print forth-init-time) (print " ")
(print lisp-init-time) (print " ")
(print (runbench1)) (print " ")
(print (runbench2)) (print " ")
(print (runbench3))
