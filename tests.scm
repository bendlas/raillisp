
(def test (name check)
     (if (not check)
         (progn (print "FAILED TEST: ")
                (println name)
                (bye))
         (println name)))

(test "eq?" (eq? (eq? 1 1) t))
(test "eq? 2" (eq? (eq? 1 3) nil))
(test "eq? 3" (eq? (eq? (cons 1 2) (cons 1 2)) nil))
(test "eq? 4" (eq? (eq? nil nil) t))
(test "eq? 4" (eq? (eq? nil t) nil))
(test "+" (eq? (+ 1 1) 2))
(test "-" (eq? (- 5 4) 1))
;(test "- 2" (eq? (- 5 10) -5))
(test "*" (eq? (* 5 4) 20))
(test "/" (eq? (/ 50 2) 25))
(test "+1" (eq? (+1 3) 4))
(test "-1" (eq? (-1 3) 2))
(test "=" (eq? (= 1 1) t))
(test "= 2" (eq? (= 0 1) nil))
(test "= 3" (eq? (= 0 nil) nil))
(test "= 4" (eq? (= t t) t))
(test ">" (eq? (> 1 2) nil))
(test "> 1" (eq? (> 1 1) nil))
(test "> 2" (eq? (> 2 1) t))
(test "> 3" (eq? (> 2 1) t))
(test "< 1" (eq? (< 1 1) nil))
(test "< 2" (eq? (< 2 1) nil))
(test "< 3" (eq? (< 1 2) t))
(test "<= 1" (eq? (<= 1 1) t))
(test "<= 2" (eq? (<= 2 1) nil))
(test "<= 3" (eq? (<= 1 2) t))
(test ">= 1" (eq? (>= 1 1) t))
(test ">= 2" (eq? (>= 2 1) t))
(test ">= 3" (eq? (>= 1 2) nil))
(test "not" (eq? (not t) nil))
(test "not 2" (eq? (not nil) t))
(test "not 3" (eq? (not (eq? 1 1)) nil))
(test "car" (eq? (car (cons 3 4)) 3))
(test "cdr" (eq? (cdr (cons 3 4)) 4))
(test "cdr 2" (eq? (cdr nil) nil))

